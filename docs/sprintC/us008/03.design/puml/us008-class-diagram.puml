@startuml
'skinparam monochrome true
skinparam packageStyle rectangle
skinparam shadowing false
skinparam linetype polyline
'skinparam linetype orto

skinparam classAttributeIconSize 0

'left to right direction

class AdvertisementRepository {
    - advertisements: List<Advertisement>
    + getAdvertisements()
    + validateAdvertisement(advertisement)
    + addAdvertisement(advertisement)
    + createAdvertisementFromRequest(advertisementRequest, commission, date)
}

class AdvertisementRequestRepository {
    - advertisementRequests: List<AdvertisementRequest>
    + getAdvertisementRequests()
    + validateAdvertisementRequest(advertisementRequest)
    + addAdvertisementRequest(advertisementRequest)
    + createRequest(emailAddress, store, agent, property, propertyType, requestType)
}

class ClientRepository {
    - clients: ArrayList<Client>
    + getClientsList()
    + getClientByEmail(emailAddress)
}

class Advertisement {
    - emailAdress: Client
    - date: String
    - commission: Commission
    - advertisementRequest: AdvertisementRequest
    + Advertisement(advertisementRequest, commission, date)
    + getClient()
    + getDate()
    + getCommission()
    + getAdvertisementRequest()
}

class AdvertisementRequest{
    - store: Store
    - agent: Employee
    - property: Property
    - propertyType: PropertyType
    - requestType: RequestType
    + AdvertisementRequest(store, agent, property, propertyType, requestType)
    + getProperty()
    + getStore()
    + getAgent()
    + getProperty()
    + getPropertyType()
    + getRequestType()
}

class Repositories {
    - Repositories()
    + getInstance() : Repositories
    + getAdvertisementRequestRepository()
    + getAdvertisementRepository()
    + getClientRepository()
}

class AcceptanceType {
    - acceptanceTypes: String[]
    + getAcceptanceTypes()
}

class CommissionType {
    - commissionTypes: String[]
    + getCommissionTypes()
}

class PublishRequestController {
    + PublishController()
    + getAdvertisementRepository()
    + createAdvertisementFromRequest(advertisementRequest, commission, date)
}

class AdvertisementRequestMapper {
    + AdvertisementRequestDTO toDTO(advertisementRequest advertisementRequest)
}

class AdvertisementRequestDTO {
    - store: Store
    - agent: Employee
    - property: Property
    - propertyType: PropertyType
    - requestType: RequestType
    + AdvertisementRequest(store, agent, property, propertyType, requestType)
    + getProperty()
    + getStore()
    + getAgent()
    + getProperty()
    + getPropertyType()
    + getRequestType()
}

class PublishRequestUI {
}

Repositories -> Repositories : instance

PublishRequestUI .> PublishRequestController
PublishRequestUI .> AdvertisementRequestDTO

PublishRequestController .> Repositories : repositories

Repositories --> "1" AdvertisementRepository
Repositories --> "1" AdvertisementRequestRepository
Repositories --> "1" ClientRepository

AdvertisementRepository --> "*" Advertisement: advertisement
AdvertisementRequestRepository --> "*" AdvertisementRequest: advertisementRequest

PublishRequestController .> AdvertisementRepository : advertisementRepository
PublishRequestController .> AdvertisementRequestRepository : advertisementRequestRepository
PublishRequestController ..> Advertisement : advertisement
PublishRequestController ..> AdvertisementRequestMapper
PublishRequestController ..> AdvertisementRequestDTO
PublishRequestController ..> ClientRepository : clientRepository

AcceptanceType --|> Advertisement
CommissionType --|> Advertisement

AdvertisementRequestMapper ..> AdvertisementRequestDTO
AdvertisementRequestMapper ..> AdvertisementRequest

AdvertisementRequest --|> Advertisement

@enduml